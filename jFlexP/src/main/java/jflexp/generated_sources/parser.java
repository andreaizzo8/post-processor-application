
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 11 19:01:20 CEST 2018
//----------------------------------------------------

package jflexp.generated_sources;

import java_cup.runtime.*;
import jflexp.Parse;
import jflexp.generated_sources.lexer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 11 19:01:20 CEST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\011\000\002\003\007\000\002\003\005" +
    "\000\002\003\007\000\002\003\052\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\034\004\022\005\007\010\012\011\004\012" +
    "\013\022\014\023\021\024\017\025\020\026\015\030\010" +
    "\031\016\032\011\001\002\000\004\006\131\001\002\000" +
    "\036\002\uffff\004\uffff\005\uffff\010\uffff\011\uffff\012\uffff" +
    "\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff\031" +
    "\uffff\032\uffff\001\002\000\036\002\130\004\022\005\007" +
    "\010\012\011\004\012\013\022\014\023\021\024\017\025" +
    "\020\026\015\030\010\031\016\032\011\001\002\000\004" +
    "\006\123\001\002\000\004\006\121\001\002\000\004\006" +
    "\117\001\002\000\004\006\115\001\002\000\004\006\046" +
    "\001\002\000\004\006\044\001\002\000\004\006\042\001" +
    "\002\000\004\006\040\001\002\000\004\006\036\001\002" +
    "\000\004\006\034\001\002\000\004\006\031\001\002\000" +
    "\004\006\023\001\002\000\004\036\024\001\002\000\004" +
    "\007\025\001\002\000\004\036\026\001\002\000\004\007" +
    "\027\001\002\000\004\036\030\001\002\000\036\002\ufffe" +
    "\004\ufffe\005\ufffe\010\ufffe\011\ufffe\012\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe" +
    "\001\002\000\006\017\032\033\033\001\002\000\036\002" +
    "\ufff8\004\ufff8\005\ufff8\010\ufff8\011\ufff8\012\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\001\002\000\036\002\ufff7\004\ufff7\005\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\001\002\000\004\036\035" +
    "\001\002\000\036\002\ufff5\004\ufff5\005\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\001\002\000\004\036\037\001" +
    "\002\000\036\002\ufff6\004\ufff6\005\ufff6\010\ufff6\011\ufff6" +
    "\012\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\001\002\000\004\036\041\001\002" +
    "\000\036\002\ufff2\004\ufff2\005\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\001\002\000\004\036\043\001\002\000" +
    "\036\002\ufff4\004\ufff4\005\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\001\002\000\004\017\045\001\002\000\036" +
    "\002\ufff9\004\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\001\002\000\004\036\047\001\002\000\004\007" +
    "\050\001\002\000\004\036\051\001\002\000\004\007\052" +
    "\001\002\000\004\036\053\001\002\000\004\013\054\001" +
    "\002\000\004\007\055\001\002\000\004\014\056\001\002" +
    "\000\004\006\057\001\002\000\004\020\060\001\002\000" +
    "\004\015\061\001\002\000\004\006\062\001\002\000\004" +
    "\036\063\001\002\000\004\007\064\001\002\000\004\036" +
    "\065\001\002\000\004\007\066\001\002\000\004\036\067" +
    "\001\002\000\004\007\070\001\002\000\004\036\071\001" +
    "\002\000\004\021\072\001\002\000\004\007\073\001\002" +
    "\000\004\017\074\001\002\000\004\007\075\001\002\000" +
    "\004\020\076\001\002\000\004\016\077\001\002\000\004" +
    "\006\100\001\002\000\004\036\101\001\002\000\004\007" +
    "\102\001\002\000\004\036\103\001\002\000\004\007\104" +
    "\001\002\000\004\036\105\001\002\000\004\007\106\001" +
    "\002\000\004\036\107\001\002\000\004\007\110\001\002" +
    "\000\004\036\111\001\002\000\004\007\112\001\002\000" +
    "\004\036\113\001\002\000\004\021\114\001\002\000\036" +
    "\002\ufffa\004\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\001\002\000\004\036\116\001\002\000\036\002" +
    "\ufffc\004\ufffc\005\ufffc\010\ufffc\011\ufffc\012\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\001\002\000\004\036\120\001\002\000\036\002\ufff1" +
    "\004\ufff1\005\ufff1\010\ufff1\011\ufff1\012\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\001\002\000\004\036\122\001\002\000\036\002\ufff3\004" +
    "\ufff3\005\ufff3\010\ufff3\011\ufff3\012\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\001" +
    "\002\000\004\036\124\001\002\000\004\007\125\001\002" +
    "\000\004\034\126\001\002\000\036\002\ufffd\004\ufffd\005" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032\ufffd\001\002\000" +
    "\036\002\001\004\001\005\001\010\001\011\001\012\001" +
    "\022\001\023\001\024\001\025\001\026\001\030\001\031" +
    "\001\032\001\001\002\000\004\002\000\001\002\000\004" +
    "\036\132\001\002\000\004\007\133\001\002\000\004\035" +
    "\134\001\002\000\036\002\ufffb\004\ufffb\005\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    boolean fedrat = false;
    String nFed;
    

    /*
    *Metodo per il parsing GOTO / X, Y , Z
    *@return: String
    */
    private String GOTO(String x, String z) {
        if(fedrat){
            fedrat = false;
            return "N" + lexer.getM() + " G1 X" + x + " Z" + z + " F" + nFed;
        } else{
            return "N" + lexer.getM() + " G0 X" + x + " Z" + z;
        }
    }

    /*
    *Metodo per il parsing TOOLNO
    *@return: String
    */
    private String TOOLNO(String n) {
        return "N" + lexer.getM() + " T" + n + " M8 G40";
    }

    /*
    *Metodo per il parsing TOOLNO
    *@return: String
    */
    private String FEDRAT(String n) {
        fedrat = true;
        nFed = n;
        return null;
    }

    private String SPINDL(String n) {
        if (fedrat) {
            fedrat = false;
            return "N" + lexer.getM() + " G97 S" + n + " G95 F" + nFed + " M4";
        } else {
            return "N" + lexer.getM() + " G97 S" + n;
        }
    }
    
    /*
    *Metodo per il parsing Circle
    *@return: String
    */
    private String circle(String A1, String A3, String R, String PFX, String PFZ) {
        if (Math.abs(Double.valueOf(A1)) > Math.abs(Double.valueOf(A3))) {
            return "N" + lexer.getM() + " " + "G3 " + PFX + " " + PFZ + " " + R;
        } else {
            return "N" + lexer.getM() + " " + "G3 " + PFX + " " + PFZ + " " + R;
        }
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cmd ::= OUTTOL SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cmd ::= INTOL SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cmd ::= REWIND SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cmd ::= SWITCH SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cmd ::= LOADTL SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cmd ::= CUTTER SLASH NUMBER 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cmd ::= CUTCOM SLASH OFF 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cmd ::= CUTCOM SLASH ON 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cmd ::= COOLNT SLASH ON 
            {
              Object RESULT =null;
		 RESULT = null;lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cmd ::= INDIRV SLASH NUMBER COMMA NUMBER COMMA NUMBER TLON COMMA GOFWD SLASH LPAREN CIRCLE SLASH NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER RPAREN COMMA ON COMMA LPAREN LINE SLASH NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER COMMA NUMBER RPAREN 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-37)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-37)).right;
		String A1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-37)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-35)).right;
		String A2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-35)).value;
		int A3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left;
		int A3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).right;
		String A3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-33)).value;
		int CXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int CXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String CX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int CYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int CYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		String CY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int CZleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int CZright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String CZ = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int Rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int Rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String R = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int Xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int Xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String X = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int Yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int Yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String Y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int Zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String Z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int PFXleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int PFXright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String PFX = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int PFYleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int PFYright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String PFY = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int PFZleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int PFZright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String PFZ = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = circle(A1, A3, R, PFX, PFZ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-39)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cmd ::= FEDRAT SLASH NUMBER COMMA MMPR 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = FEDRAT(n);lexer.decM(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cmd ::= SPINDL SLASH NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = SPINDL(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cmd ::= TOOLNO SLASH NUMBER COMMA TURN 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = TOOLNO(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cmd ::= GOTO SLASH NUMBER COMMA NUMBER COMMA NUMBER 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GOTO(x, z); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cmd_list ::= cmd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lexer.nextM();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cmd_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cmd_list ::= cmd_list cmd 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Parse.println(e); lexer.nextM();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmd_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

